[{"/Users/zhuting03/Documents/EchoStudy/icon-find/src/index.js":"1","/Users/zhuting03/Documents/EchoStudy/icon-find/src/reportWebVitals.js":"2","/Users/zhuting03/Documents/EchoStudy/icon-find/src/App.js":"3","/Users/zhuting03/Documents/EchoStudy/icon-find/src/icon-predict/iconSearchPredict/script.js":"4","/Users/zhuting03/Documents/EchoStudy/icon-find/src/icon-predict/iconSearchPredict/utils.js":"5"},{"size":500,"mtime":1610091992883,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610090520222,"results":"8","hashOfConfig":"7"},{"size":4435,"mtime":1610877479974,"results":"9","hashOfConfig":"7"},{"size":2581,"mtime":1610877293174,"results":"10","hashOfConfig":"7"},{"size":690,"mtime":1610005692000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"u0y332",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/zhuting03/Documents/EchoStudy/icon-find/src/index.js",[],["26","27"],"/Users/zhuting03/Documents/EchoStudy/icon-find/src/reportWebVitals.js",[],"/Users/zhuting03/Documents/EchoStudy/icon-find/src/App.js",["28","29"],"import React, { useState } from 'react';\nimport { Modal, Button, Upload, message} from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport {Icon} from '@befe/brick-comp-icon';\nimport {\n    SvgCalendar,\n    SvgChat,\n    SvgDelete,\n    SvgHeart,\n    SvgHeartFill,\n    SvgHome,\n    SvgMagnifierMinus,\n    SvgMagnifierPlus,\n    SvgUserPlus,\n    SvgUserTeam\n} from '@befe/brick-icon'\n\nimport {predict} from './icon-predict/iconSearchPredict/script'\n\nimport './App.css';\n\nconst { Dragger } = Upload;\nconst iconMap = {\n    'SvgCalendar' : SvgCalendar,\n    'SvgChat': SvgChat,\n    'SvgDelete': SvgDelete,\n    'SvgHeart': SvgHeart,\n    'SvgHeartFill': SvgHeartFill,\n    'SvgHome': SvgHome,\n    'SvgMagnifierMinus': SvgMagnifierMinus,\n    'SvgMagnifierPlus': SvgMagnifierPlus,\n    'SvgUserPlus': SvgMagnifierPlus,\n    'SvgUserTeam': SvgUserTeam\n}\n\nconst App = () => {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [predictResult, setPredictResult] = useState([]);\n    const [fileList, setFileList] = useState([]);\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const handleOk = () => {\n        setIsModalVisible(false);\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    const onChange = async ({ fileList: newFileList }) => {\n        await setFileList(newFileList)\n\n\n        if (newFileList && newFileList.length > 0) {\n\n            const file = newFileList[0];\n\n            let src = file.url;\n            if (!src) {\n                src = await new Promise(resolve => {\n                    const reader = new FileReader();\n                    reader.readAsDataURL(file.originFileObj);\n                    reader.onload = () => resolve(reader.result);\n                });\n            }\n            const image = new Image();\n            image.src = src;\n            image.width = 224;\n            image.height = 224;\n\n            const predictResultTemp = await predict(image);\n            console.log('predict result', predictResultTemp)\n            // const predictResult = [\n            //     {className: SvgUserPlus, score: 0.640287697},\n            //     {className: SvgMagnifierMinus, score: 0.30},\n            //     {className: SvgUserTeam, score: 0.028}\n            // ]\n\n            setPredictResult(predictResultTemp)\n        }\n    };\n\n    // const onPreview = async file => {\n    //     let src = file.url;\n    //     if (!src) {\n    //         src = await new Promise(resolve => {\n    //             const reader = new FileReader();\n    //             reader.readAsDataURL(file.originFileObj);\n    //             reader.onload = () => resolve(reader.result);\n    //         });\n    //     }\n    //     const image = new Image();\n    //     image.src = src;\n    //     const imgWindow = window.open(src);\n    //     imgWindow.document.write(image.outerHTML);\n    // };\n\n    const props = {\n        name: 'file',\n        listType: \"picture\",\n        // multiple: true,\n        action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n        defaultFileList: [...fileList],\n        // onPreview: file => onPreview(file),\n        onChange\n    };\n\n    return (\n        <>\n            <Button type=\"primary\" onClick={showModal}>\n                Open Modal\n            </Button>\n            <Modal title=\"Basic Modal\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\n                <Dragger {...props}>\n                    <p className=\"ant-upload-drag-icon\">\n                        <InboxOutlined />\n                    </p>\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                    <p className=\"ant-upload-hint\">\n                        Support for a single or bulk upload. Strictly prohibit from uploading company data or other\n                        band files\n                    </p>\n                </Dragger>\n\n                <div>\n                    {\n                        predictResult.map(item => {\n                            return <div className={'result-item-wrapper'}>\n                                <Icon svg={iconMap[item.className]} />\n                                <p>{`score为${(item.score * 100).toFixed(0)} 类型为 ${item.className}`}</p>\n                            </div>\n                        })\n                    }\n                </div>\n            </Modal>\n        </>\n    );\n};\n\nexport default App;\n","/Users/zhuting03/Documents/EchoStudy/icon-find/src/icon-predict/iconSearchPredict/script.js",["30","31","32"],"// import * as tfvis from '@tensorflow/tfjs-vis'\nimport * as tf from '@tensorflow/tfjs'\n\nimport {img2x, file2img} from './utils'\n\nconst ICON_CLASSES = [\n    'SvgCalendar',\n    'SvgChat',\n    'SvgDelete',\n    'SvgHeart',\n    'SvgHeartFill',\n    'SvgHome',\n    'SvgMagnifierMinus',\n    'SvgMagnifierPlus',\n    'SvgUserPlus',\n    'SvgUserTeam'\n]\n\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json'  // imageNet模型\nconst TRANSFER_MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/icon/web_model/transferModel.json' // icon 识别模型\n\n// export async function predictObj() {\n\nasync function loadModel() {\n    const model = await tf.loadLayersModel(TRANSFER_MOBILENET_MODEL_PATH)\n\n    // 加载imageNet模型\n    const mobilenet = await tf.loadLayersModel(MOBILENET_MODEL_PATH)\n    // mobilenet.summary()\n    // 截断 imageNet模型，生成我们新的 截断模型 从 conv_pw_13_relu 截断\n    const layer = mobilenet.getLayer('conv_pw_13_relu')  // 获取卷积层 名称为 conv_pw_13_relu 的层\n    const truncatMobileNet = tf.model({\n        inputs: mobilenet.inputs,\n        outputs: layer.output\n    })\n\n    return {\n        model,\n        truncatMobileNet\n    }\n}\n\nfunction findIndicesOfMax(inp, count) {\n    const outp = [];\n    for (let i = 0; i < inp.length; i += 1) {\n        outp.push(i); // add index to output array\n        if (outp.length > count) {\n            outp.sort((a, b) => inp[b] - inp[a]); // descending sort the output array\n            outp.pop(); // remove the last index (index of smallest element in output array)\n        }\n    }\n    return outp;\n}\n\nasync function predict(image){\n    // 将上传的图片展示到页面上\n    // const image = await file2img(file)\n    // document.body.appendChild(image)\n\n    const {model, truncatMobileNet} = await loadModel()\n\n    const pred = tf.tidy(() => {\n        // 将上传的image图片转换成tensor并reshape\n        const x = img2x(image)\n        // 将图片喂给截断模型进行预测\n        const input = truncatMobileNet.predict(x)\n        // 将截断模型输出的结果喂给新模型预测  这个预测过程与训练过程保持一致\n        return model.predict(input)\n    })\n\n    const index = pred.argMax(1).dataSync()\n    const resultArr = pred.squeeze().arraySync()\n\n    console.log(resultArr)\n\n    const predictions = findIndicesOfMax(resultArr, 5).map(i => ({\n        className: ICON_CLASSES[i],\n        score: resultArr[i],\n    }));\n\n    return predictions\n\n    console.log('predictions', predictions)\n}\n\nexport {\n    predict,\n    loadModel\n}","/Users/zhuting03/Documents/EchoStudy/icon-find/src/icon-predict/iconSearchPredict/utils.js",[],["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":2,"column":33,"nodeType":"41","messageId":"42","endLine":2,"endColumn":40},{"ruleId":"39","severity":1,"message":"43","line":14,"column":5,"nodeType":"41","messageId":"42","endLine":14,"endColumn":16},{"ruleId":"39","severity":1,"message":"44","line":4,"column":16,"nodeType":"41","messageId":"42","endLine":4,"endColumn":24},{"ruleId":"39","severity":1,"message":"45","line":71,"column":11,"nodeType":"41","messageId":"42","endLine":71,"endColumn":16},{"ruleId":"46","severity":1,"message":"47","line":83,"column":5,"nodeType":"48","messageId":"49","endLine":83,"endColumn":44},{"ruleId":"35","replacedBy":"50"},{"ruleId":"37","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'message' is defined but never used.","Identifier","unusedVar","'SvgUserPlus' is defined but never used.","'file2img' is defined but never used.","'index' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode",["52"],["53"],"no-global-assign","no-unsafe-negation"]